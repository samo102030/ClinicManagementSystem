//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sliding_menue
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class clincEntities : DbContext
    {
        public clincEntities()
            : base("name=clincEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<allergy> allergies { get; set; }
        public virtual DbSet<classifi> classifis { get; set; }
        public virtual DbSet<disease> diseases { get; set; }
        public virtual DbSet<drug> drugs { get; set; }
        public virtual DbSet<lab_tests> lab_tests { get; set; }
        public virtual DbSet<patient_lab> patient_lab { get; set; }
        public virtual DbSet<patient_radiology> patient_radiology { get; set; }
        public virtual DbSet<pt_scores> pt_scores { get; set; }
        public virtual DbSet<radiology> radiologies { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<score> scores { get; set; }
        public virtual DbSet<sergical> sergicals { get; set; }
        public virtual DbSet<sign> signs { get; set; }
        public virtual DbSet<specialization> specializations { get; set; }
        public virtual DbSet<symptom> symptoms { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<syst> systs { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<vist> vists { get; set; }
        public virtual DbSet<patient> patients { get; set; }
        public virtual DbSet<clinic_details> clinic_details { get; set; }
        public virtual DbSet<examination> examinations { get; set; }
        public virtual DbSet<family_history> family_history { get; set; }
        public virtual DbSet<hoo> hoos { get; set; }
        public virtual DbSet<management_plan> management_plan { get; set; }
        public virtual DbSet<past_med_history> past_med_history { get; set; }
        public virtual DbSet<social_history> social_history { get; set; }
        public virtual DbSet<socialWomanHistoryy> socialWomanHistoryies { get; set; }
    
        public virtual int InsertExamination(Nullable<int> fkVistid, Nullable<int> pulse, string bp, Nullable<decimal> temp, Nullable<decimal> o2, Nullable<decimal> rr, Nullable<decimal> rbs, Nullable<decimal> bmi, string hand, string arm, string neck, string face, string lower_limp, string cardiacEx, string chest, string adominal, byte[] ecg, string ecg_notes)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var pulseParameter = pulse.HasValue ?
                new ObjectParameter("pulse", pulse) :
                new ObjectParameter("pulse", typeof(int));
    
            var bpParameter = bp != null ?
                new ObjectParameter("bp", bp) :
                new ObjectParameter("bp", typeof(string));
    
            var tempParameter = temp.HasValue ?
                new ObjectParameter("temp", temp) :
                new ObjectParameter("temp", typeof(decimal));
    
            var o2Parameter = o2.HasValue ?
                new ObjectParameter("o2", o2) :
                new ObjectParameter("o2", typeof(decimal));
    
            var rrParameter = rr.HasValue ?
                new ObjectParameter("rr", rr) :
                new ObjectParameter("rr", typeof(decimal));
    
            var rbsParameter = rbs.HasValue ?
                new ObjectParameter("rbs", rbs) :
                new ObjectParameter("rbs", typeof(decimal));
    
            var bmiParameter = bmi.HasValue ?
                new ObjectParameter("bmi", bmi) :
                new ObjectParameter("bmi", typeof(decimal));
    
            var handParameter = hand != null ?
                new ObjectParameter("hand", hand) :
                new ObjectParameter("hand", typeof(string));
    
            var armParameter = arm != null ?
                new ObjectParameter("arm", arm) :
                new ObjectParameter("arm", typeof(string));
    
            var neckParameter = neck != null ?
                new ObjectParameter("neck", neck) :
                new ObjectParameter("neck", typeof(string));
    
            var faceParameter = face != null ?
                new ObjectParameter("face", face) :
                new ObjectParameter("face", typeof(string));
    
            var lower_limpParameter = lower_limp != null ?
                new ObjectParameter("lower_limp", lower_limp) :
                new ObjectParameter("lower_limp", typeof(string));
    
            var cardiacExParameter = cardiacEx != null ?
                new ObjectParameter("cardiacEx", cardiacEx) :
                new ObjectParameter("cardiacEx", typeof(string));
    
            var chestParameter = chest != null ?
                new ObjectParameter("chest", chest) :
                new ObjectParameter("chest", typeof(string));
    
            var adominalParameter = adominal != null ?
                new ObjectParameter("adominal", adominal) :
                new ObjectParameter("adominal", typeof(string));
    
            var ecgParameter = ecg != null ?
                new ObjectParameter("ecg", ecg) :
                new ObjectParameter("ecg", typeof(byte[]));
    
            var ecg_notesParameter = ecg_notes != null ?
                new ObjectParameter("ecg_notes", ecg_notes) :
                new ObjectParameter("ecg_notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertExamination", fkVistidParameter, pulseParameter, bpParameter, tempParameter, o2Parameter, rrParameter, rbsParameter, bmiParameter, handParameter, armParameter, neckParameter, faceParameter, lower_limpParameter, cardiacExParameter, chestParameter, adominalParameter, ecgParameter, ecg_notesParameter);
        }
    
        public virtual int InsertFamHistory(Nullable<int> fkVistid, string diseas)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var diseasParameter = diseas != null ?
                new ObjectParameter("diseas", diseas) :
                new ObjectParameter("diseas", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFamHistory", fkVistidParameter, diseasParameter);
        }
    
        public virtual int InsertHoos(Nullable<int> fkVistid, string sysname, string sympname)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var sysnameParameter = sysname != null ?
                new ObjectParameter("sysname", sysname) :
                new ObjectParameter("sysname", typeof(string));
    
            var sympnameParameter = sympname != null ?
                new ObjectParameter("sympname", sympname) :
                new ObjectParameter("sympname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertHoos", fkVistidParameter, sysnameParameter, sympnameParameter);
        }
    
        public virtual int InsertMangePlan(Nullable<int> fkVistid, Nullable<int> fkdrugId, string prc_english, string prc_arabic)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var fkdrugIdParameter = fkdrugId.HasValue ?
                new ObjectParameter("fkdrugId", fkdrugId) :
                new ObjectParameter("fkdrugId", typeof(int));
    
            var prc_englishParameter = prc_english != null ?
                new ObjectParameter("prc_english", prc_english) :
                new ObjectParameter("prc_english", typeof(string));
    
            var prc_arabicParameter = prc_arabic != null ?
                new ObjectParameter("prc_arabic", prc_arabic) :
                new ObjectParameter("prc_arabic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMangePlan", fkVistidParameter, fkdrugIdParameter, prc_englishParameter, prc_arabicParameter);
        }
    
        public virtual int InsertPastMedicalHistory(Nullable<int> fkVistid, string chronicDiseas, string sergical, string hospitalAdmi, string drugHistory, string notes)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var chronicDiseasParameter = chronicDiseas != null ?
                new ObjectParameter("chronicDiseas", chronicDiseas) :
                new ObjectParameter("chronicDiseas", typeof(string));
    
            var sergicalParameter = sergical != null ?
                new ObjectParameter("sergical", sergical) :
                new ObjectParameter("sergical", typeof(string));
    
            var hospitalAdmiParameter = hospitalAdmi != null ?
                new ObjectParameter("hospitalAdmi", hospitalAdmi) :
                new ObjectParameter("hospitalAdmi", typeof(string));
    
            var drugHistoryParameter = drugHistory != null ?
                new ObjectParameter("drugHistory", drugHistory) :
                new ObjectParameter("drugHistory", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPastMedicalHistory", fkVistidParameter, chronicDiseasParameter, sergicalParameter, hospitalAdmiParameter, drugHistoryParameter, notesParameter);
        }
    
        public virtual int InsertPatientLab(Nullable<int> fkVistid, Nullable<int> fkTest_id, Nullable<decimal> resualt, Nullable<System.DateTime> dat)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var fkTest_idParameter = fkTest_id.HasValue ?
                new ObjectParameter("FkTest_id", fkTest_id) :
                new ObjectParameter("FkTest_id", typeof(int));
    
            var resualtParameter = resualt.HasValue ?
                new ObjectParameter("resualt", resualt) :
                new ObjectParameter("resualt", typeof(decimal));
    
            var datParameter = dat.HasValue ?
                new ObjectParameter("dat", dat) :
                new ObjectParameter("dat", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatientLab", fkVistidParameter, fkTest_idParameter, resualtParameter, datParameter);
        }
    
        public virtual int InsertPatientRadio(Nullable<int> fkVistid, Nullable<int> fkRadio_id, byte[] attachment, string notes)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var fkRadio_idParameter = fkRadio_id.HasValue ?
                new ObjectParameter("FkRadio_id", fkRadio_id) :
                new ObjectParameter("FkRadio_id", typeof(int));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("attachment", attachment) :
                new ObjectParameter("attachment", typeof(byte[]));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatientRadio", fkVistidParameter, fkRadio_idParameter, attachmentParameter, notesParameter);
        }
    
        public virtual int InsertPatientScore(Nullable<int> fkVistid, Nullable<int> fkscore_id, string score_res)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var fkscore_idParameter = fkscore_id.HasValue ?
                new ObjectParameter("Fkscore_id", fkscore_id) :
                new ObjectParameter("Fkscore_id", typeof(int));
    
            var score_resParameter = score_res != null ?
                new ObjectParameter("score_res", score_res) :
                new ObjectParameter("score_res", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatientScore", fkVistidParameter, fkscore_idParameter, score_resParameter);
        }
    
        public virtual int InsertSocialHistory(Nullable<int> fkVistid, string smokintStatus, string alcholStatus, string drugs, string driving, string menstrual_cycle, string prgnancy, string abortion, string pills, string notesSocial, string notesWomenSc)
        {
            var fkVistidParameter = fkVistid.HasValue ?
                new ObjectParameter("FkVistid", fkVistid) :
                new ObjectParameter("FkVistid", typeof(int));
    
            var smokintStatusParameter = smokintStatus != null ?
                new ObjectParameter("smokintStatus", smokintStatus) :
                new ObjectParameter("smokintStatus", typeof(string));
    
            var alcholStatusParameter = alcholStatus != null ?
                new ObjectParameter("alcholStatus", alcholStatus) :
                new ObjectParameter("alcholStatus", typeof(string));
    
            var drugsParameter = drugs != null ?
                new ObjectParameter("drugs", drugs) :
                new ObjectParameter("drugs", typeof(string));
    
            var drivingParameter = driving != null ?
                new ObjectParameter("driving", driving) :
                new ObjectParameter("driving", typeof(string));
    
            var menstrual_cycleParameter = menstrual_cycle != null ?
                new ObjectParameter("menstrual_cycle", menstrual_cycle) :
                new ObjectParameter("menstrual_cycle", typeof(string));
    
            var prgnancyParameter = prgnancy != null ?
                new ObjectParameter("prgnancy", prgnancy) :
                new ObjectParameter("prgnancy", typeof(string));
    
            var abortionParameter = abortion != null ?
                new ObjectParameter("abortion", abortion) :
                new ObjectParameter("abortion", typeof(string));
    
            var pillsParameter = pills != null ?
                new ObjectParameter("pills", pills) :
                new ObjectParameter("pills", typeof(string));
    
            var notesSocialParameter = notesSocial != null ?
                new ObjectParameter("notesSocial", notesSocial) :
                new ObjectParameter("notesSocial", typeof(string));
    
            var notesWomenScParameter = notesWomenSc != null ?
                new ObjectParameter("notesWomenSc", notesWomenSc) :
                new ObjectParameter("notesWomenSc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSocialHistory", fkVistidParameter, smokintStatusParameter, alcholStatusParameter, drugsParameter, drivingParameter, menstrual_cycleParameter, prgnancyParameter, abortionParameter, pillsParameter, notesSocialParameter, notesWomenScParameter);
        }
    
        public virtual int PrintLabVisit(Nullable<int> ptId)
        {
            var ptIdParameter = ptId.HasValue ?
                new ObjectParameter("ptId", ptId) :
                new ObjectParameter("ptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrintLabVisit", ptIdParameter);
        }
    
        public virtual int PrintPrscVisit(Nullable<int> ptId)
        {
            var ptIdParameter = ptId.HasValue ?
                new ObjectParameter("ptId", ptId) :
                new ObjectParameter("ptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrintPrscVisit", ptIdParameter);
        }
    
        public virtual int PrintRadVisit(Nullable<int> ptId)
        {
            var ptIdParameter = ptId.HasValue ?
                new ObjectParameter("ptId", ptId) :
                new ObjectParameter("ptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrintRadVisit", ptIdParameter);
        }
    
        public virtual int PrintShorVisit(Nullable<int> ptId)
        {
            var ptIdParameter = ptId.HasValue ?
                new ObjectParameter("ptId", ptId) :
                new ObjectParameter("ptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrintShorVisit", ptIdParameter);
        }
    
        public virtual ObjectResult<showRadiology_Result> showRadiology(Nullable<int> vId)
        {
            var vIdParameter = vId.HasValue ?
                new ObjectParameter("vId", vId) :
                new ObjectParameter("vId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showRadiology_Result>("showRadiology", vIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int testCrystalRepo(Nullable<int> ptId)
        {
            var ptIdParameter = ptId.HasValue ?
                new ObjectParameter("ptId", ptId) :
                new ObjectParameter("ptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("testCrystalRepo", ptIdParameter);
        }
    }
}
